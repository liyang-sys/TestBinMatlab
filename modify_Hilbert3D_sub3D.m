function [m,stnew,L,Nsub,nsubtem,len]=modify_Hilbert3D_sub3D(dim,inc,m0,N0,Nsub,st0,nsubtem,L0,k0)

load n3D % <=== Seeds are generated by "gen_ns.m"
if k0==3
   if inc==-1
      n=n87; dN=64;
   elseif inc==-2
      n=n86; dN=2*64;
   elseif inc==-3
      n=n85; dN=3*64;
   elseif inc==-4
      n=n84; dN=4*64;
   elseif inc==-5
      n=n83; dN=5*64;
   elseif inc==-6
      n=n82; dN=6*64;
   else %inc==-7
      n=n81; dN=7*64;
   end
elseif k0==2
   if inc==-1
      n=n43; dN=16;
   elseif inc==-2
      n=n42; dN=2*16;
   else %inc==-3
      n=n41; dN=3*16;
   end
else %k0==1, inc=-1 is the only situation
   n=n21; dN=4;
end

r0=m0(1,:); c0=m0(2,:); d0=m0(3,:);
subdim=2^k0; %subdim is fixed at 2^k0, and needs to be modified from modified_Hilbert_sub.m !!! 
nsub=double(dim/subdim);  %the number of sub-squares that need to be stretched
st=int32(ones(1,nsub));  %The number of starting points is equal to the number of sub-squares.
L=log2(nsub);
for ia=L0:L %Finding 'st' at level L from level 'L0'. When level in increased by 1, the number in 'st' is doubled. 
   nsubtem=nsubtem*2; %The number of sub-squares in doubled, and thus the number in 'st' is doubled accordingly.
   Nsub=Nsub/4;   %the number of elements in the sub-square
   for pt=2:2:nsubtem %the added 'st' points
      pt0=pt/2; %performing pt/2, the added points becomes the initial points
      st(pt-1)=st0(pt0)+Nsub;
      st(pt)=st(pt-1)+Nsub;    
   end
   st0=st;
end

Nsubd=Nsub-dN;
len=N0-nsub*dN; r=int32(zeros(1,len)); c=r; d=r;   
stnew=st-int32(0:dN:dN*(nsub-1));

ed0=1; ednew0=1;
for ib=1:nsub
   s=st(ib); ed=st(ib)+Nsub-1;
   
   snew=stnew(ib); ednew=stnew(ib)+Nsubd-1;
   r(ednew0:snew-1)=r0(ed0:s-1); 
   r(snew:ednew)=n(3,:) +r0(s)-1;  %The d-direction becomes r-direction now !!! 
   c(ednew0:snew-1)=c0(ed0:s-1); 
   c(snew:ednew)=n(2,:) +c0(s)-1; 
   d(ednew0:snew-1)=d0(ed0:s-1); 
   d(snew:ednew)=n(1,:);           %Thus, the r-direction goes to the d-direction.
   ed0=ed; ednew0=ednew;
end
r(ednew0+1:len)=r0(ed0+1:N0);  c(ednew0+1:len)=c0(ed0+1:N0);  d(ednew0+1:len)=d0(ed0+1:N0);
m=[r; c; d];
